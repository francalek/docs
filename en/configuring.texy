Configuration
*************

Configuration is usually written in NEON format. Have fun trying out the syntax at http://ne-on.org.
Many features of Nette Framework can be set up in configuration file. Framework configures itself by a [DI container extension |di-extensions] ([api:Nette\DI\Extensions\NetteExtension])
 which accepts parameters in `nette:` section of the configuration file.


HTTP proxies
============

You can define your http proxy, so that HTTP request's remote address and remote host will be correct.

```neon
nette:
	http:
		proxy: 127.0.0.1  # ip address, range, hostname or array of these values
```


Sessions
========

Here you can set all [directives |php:session.configuration] (in camelCase format).

```neon
nette:
	session:
		autoStart: true  # default is smart
		expiration: 10 days
		name: ...
		...
```

.[tip]
`autoStart: smart` is recommended. It automatically starts the session only if it already exists.

Read more on [session configuration | sessions#Session configuration].


Application
===========

```neon
nette:
	application:
		debugger: true  # debugger bar panel
		catchExceptions: %productionMode%
		errorPresenter: Front:Error
		mapping:  # mapping between presenter name and presenter class
			Front: App\*Module\*Presenter
```


Routing
=======

```neon
nette:
	routing:
		debugger: true  # debugger bar panel
		routes:
				index.php: Dashboard:default
				'<presenter>/<action>[/<id>]': Dashboard:default
```

[Routes |routing#toc-route-for-prettier-urls] are in `mask: action` format.


Security
========

```neon
nette:
	security:
		debugger: true  # debugger bar panel
		frames: ...     # affects X-Frame-Options header

		users:
			johndoe: secretpassword

		roles:
			guest:
			member:
			admin: [member]  # admin extends member

		resources:
			file:
```

By filling in `users` option you create `SimpleAuthenticator`, by defining `roles` or `resources` you create `Nette\Security\Permission` authorizator. More in [User Authorization and Privileges |access-control].

For security reasons Nette Framework sends HTTP header `X-Frame-Options: SAMEORIGIN` by default, so that the page can be embedded in iframe only from pages on the same domain. This behavior may be unwanted in certain situations (for example if you are developing a facebook application). You can override this setting by `frames: yes`, `frames: http://allowed-host.com` or `frames: no`.


Mailing
=======

Default mailer is `SendmailMailer`. By setting `smtp` you activate `SmtpMailer`.

```neon
nette:
	mailer:
		smtp: true  # use SmtpMailer instead of SendmailMailer
		host: ...
		port: ...
		username: ...
		password: ...
		secure: ...
		timeout: ...
```


Database
========

You can define multiple database connections, if you do so you can set which one will be [automatically injected |configuring#toc-auto-wiring] to your services by the `autowired` option. The following code shows how to set up one connection called `default`.

```neon
nette:
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false  # debugger bar panel
			explain: false   # explain queries in debugger bar
			reflection: discovered  # or conventional or classname, default is discovered
			autowired: true
```

This creates service `@nette.database.default` and sets reflection and cache for you.


Forms
=====

You can change default validation error messages.

```neon
nette:
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
```


Latte
=====

You can turn on and off XHTML rendering mode and register custom macros.

```neon
nette:
	latte:
		xhtml: yes  # default is no
		macros:
			- App\MyLatteMacros::register  # static method, classname or callable
```


DI container
============

```neon
nette:
	container:
		debugger: true  #debugger bar panel
		accessors: true  #enables $container->serviceName shortcut
```


Debugger
========

```neon
nette:
	debugger:
		email: webmaster@example.com  # for sending error logs
		strictMode: TRUE
		editor: ...
		browser: ...

		bar:  # debugger bar panels
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)

		blueScreen:  # blue screen panels
			- DoctrinePanel::renderException
```


Low-level modifications
=======================

All these settings affect final DI container. Compared to direct definition in `services` section it provides shorter and more straightaway syntax. If you need to tune these services by yourself, you can redefine them:

```neon
services:
	nette.mailer:
		factory: MySmtpMailer

	nette.presenterFactory:
		factory: MyPresenterFactory
```

Or create new services extending the default ones:

```neon
services:
	myConnection < nette.database.default:
		setup:
			$onQuery: [ @logger::log ]
```



Custom services
***************


Services definitions
====================

```neon
services:
	database: Nette\Database\Connection(%dsn%, %user%, %password%)

# or multi-lines
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)

# or more multi-lines :-)
	database:
		class: Nette\Database\Connection
		arguments: [%dsn%, %user%, %password%]
```

Generates:

```php
function createServiceDatabase()
{
	return new Nette\Database\Connection(
		$this->parameters['dsn'],
		$this->parameters['user'],
		$this->parameters['password']
	);
}
```

Service definition:

```neon
services:
	database:
		class: Nette\Database\Connection
		factory: DbFactory::createConnection

```

`DbFactory::createConnection`:

```php
class DbFactory
{
	static function createConnection()
	{
		...
	}
}
```

Generates:

```php
	function createServiceDatabase()
	{
		return DbFactory::createConnection($this);
	}
```


Setup
=====

```neon
services:
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)
		setup:
			- setCacheStorage(@cacheStorage)

```

Generates:

```php
	function createServiceDatabase()
	{
		$service = new Nette\Database\Connection(...);
		$service->setCacheStorage($this->cacheStorage);
		return $service;
	}
```

Autowiring feature adds dependencies automatically, so they don't even have to be mentioned:

```neon
setup:
	- setCacheStorage
```

In case the `cacheStorage` service does not exist, it is possible to use a result of a call as a parameter:

```neon
setup:
	- setCacheStorage( Factory::createStorage() )

# or a method of other service:
	- setCacheStorage( @factory::createStorage() )
```

Alternatively a newly created class instance:

```neon
setup:
	- setCacheStorage( Nette\Caching\Storages\FileStorage(%tempDir%) )

# generates: $service->setCacheStorage(new Nette\Caching\Storages\FileStorage(...));
```

You can also set a value of a property:

substitutions
```neon
setup:
	- $substitutions( [db: test] )

# generates: $service->substitutions = array('db' => 'test');
```

Full example:

```neon
parameters:
	database:
		driver: mysql
		host: localhost
		dbname: test
		user: jim
		password: beam
		substitutions:
			db: test

services:
	database:
		factory: Nette\Database\Connection(
			'%database.driver%:host=%database.host%;dbname=%database.dbname%',
			%database.user%, %database.password%, null,
			Nette\Database\Reflection\DiscoveredReflection()
		)
		setup:
			- setCacheStorage
			- $substitutions( %database.substitutions% )

```



Anonymous services
==================

Time after time there are services that are in fact not referenced anywhere else in config files. Naming these services in this case is not necessary. To define an anonymous service, use the following syntax:

```neon
services:
	- Simple\Service

	-
		factory: Complex\Service
		setup:
			- setLang(%lang%)
```

To refer to such anonymous service you will need to use the fully qualified class name instead.

```neon
services:
	router: @App\RouterFactory::createRouter
```

Keep in mind that from a nature of anonymous services, it is not possible to register more than one of the same type, because it would lead to an ambiguity.


Service definitions inheritance
===============================

```neon
services:
	dev_database < database
		setup:
			- Diagnostics\ConnectionPanel::initialize

```



Auto-wiring
***********

Auto-wiring feature can automatically pass dependencies into constructor and methods of the service. It uses typehinting and `@return` annotations. There can be only one service matching the type in the container, otherwise an exception is thrown.

To define more than one service of the same type we need to exclude them from auto-wiring:

```neon
services:
	cacheStorage:
		factory: Nette\Caching\Storages\FileStorage(%tempDir%)

	tempCacheStorage:
		factory: Nette\Caching\Storages\DevNullStorage
		autowired: no

```


When modifying the Nette Framework's core services we need to make sure the container is aware of the classes we want to use. That means using fully qualified class names in `@return` annotations or set the FQ class name with `class` entry.


Multiple configuration files
****************************

Use `includes` section to add more configuration files.

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Configuration merging process assigns the highest priority to the file containing `includes` section and the lowest priority to the first included file. To prevent merging of a certain array use exclamation mark right after the name of the array:

```neon
argument!: [1, 2, 3]
```
