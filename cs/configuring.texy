Konfigurace
***********

Samotná konfigurace se obykle zapisuje v NEON souboru. Se syntaxí se můžete seznámit na stránce http://ne-on.org. V souboru můžeme nastavit
- sessions
- aplikaci
- databázi
- debugger
- routování
- security
- maily
- formuláře
- šablony
- vlastní služby
- Dependency Injection
- vlastní parametry


Sessions
========

Lze nastavovat všechny PHP "direktivy":http://www.php.net/manual/en/session.configuration.php (ve formátu camelCase).

```neon
session:
	autoStart: true  # výchozí je smart
	expiration: 10 days
	name: ...
	...
```

.[tip]
Doporučuje se používat `autoStart: smart`, protože pak automaticky startuje session, pouze pokud je již vytvořena.

Více o [konfiguraci sessions | sessions#Konfigurace sessions].


Application
===========

```neon
application:
	debugger: true # panel do Laděnky
	catchExceptions: ...
	errorPresenter: ...
```
errorPresenter
--------------

Defaultní hodnota: `Nette:Error`

Tímto parametrem určíme, jaký presenter se má zavolat, dojde-li v naší aplikaci k chybě. Jak takový presenter může vypadat, "najdeme v sandboxu":https://github.com/nette/sandbox/blob/v2.3/app/presenters/ErrorPresenter.php.

.[note]
Pokud dojde k chybě během zpracování error presenteru, tak Tracy zobrazí pouze jednoduchou chybovou stránku.

catchExceptions
---------------

Defaultní hodnota: `TRUE` pro produkční mód, `FALSE` pro debug mód

Tento parametr ovlivňuje, zda dojde k zavolání error presenteru. Změnou hodnoty na `TRUE` můžeme v debug módu ověřit správnou funkčnost error presenteru.

mapping
-------

Defaultní hodnota: <code>\*: \*Module\\*Presenter</code> (v sandboxu je pak upravená na <code>\*: App\\*Module\Presenters\\*Presenter</code>)

Tento parametr obsahuje pole s pravidly pro přepis názvu presenteru na název třídy. Klíč v poli obsahuje název modulu, pro který se má toto pravidlo uplatnit, nebo `*` jako fallback pro ostatní moduly. Hodnota pak obsahuje masku pravidla:
```neon
application:
	mapping:
		Admin: App\Admin\*Module\*Presenter
		*: App\*Module\Presenters\*Presenter
```

Presenter `Front:Blog:Article` je obsažen v modulu Front, pro ten nemáme žádný vlastní mapping, použije se tedy obecný s hvezdičkou a výsledná třída bude `App\FrontModule\BlogModule\Presenters\ArticlePresenter`. Presenter `Admin:User:Edit` se nachází v modulu `Admin`, pro které zde máme oddělený mapping. Výsledný název třídy bude `App\Admin\UserModule\EditPresenter` (všimněte si, že jelikož je modul `Admin` již uveden v pravidlech mappingu, ve výsledném názvu třídy bude zahozen).

silentLinks
-----------

Defaultní hodnota: `FALSE`

Tato hodnota určuje, jak se Nette zachová v debug módu při tom, když se nepodaří vygenerovat odkaz. Defautlní hodnota `FALSE` znamená, že Nette vyhodí `E_USER_WARNING` chybu. Nastavením na `TRUE` dojde k potlačení této chybové hlášky. V produkčním prostředí se `E_USER_WARNING` vyvolá vždy.

Toto chování můžeme také ovlivnit nastavením třídní proměnné [Presenteru::$invalidLinkMode"|#Neplatné odkazy].

scan*
-----

Nette umožnuje automaticky registrovat presentery jako služby, což poté zrychlí jejich vytváření. Je zde několik konfiguračních možností, které určují, kde a jak bude Nette tyto presentery hledat.

scanDirs
--------

Defaultní hodnota: `%appDir%` (tedy `/app`)

Tato hodnota obsahuje pole určující, v jakých adresářích má Nette hledat presentery pomocí RobotLoaderu. Pokud zapíšeme do konfigurace nějakou hodnotu, bude spojená s tou defaultní:
```neon
application:
	scanDirs:
		- foo
```

`scanDirs` pak bude obsahovat hodnoty `%appDir%` a `foo`, pokud bychom chtěli skenování adresářů vypnout nebo zcela přepsat, musíme použít modifkátor `!`, který hodnotu přepíše:
```neon
application:
	scanDirs!:
		- foo
```

`scanDirs` bude nyní obsahovat pouze hodnotu `foo`.

scanComposer
------------

Defaultní hodnota: `TRUE`

Tento paremetr určuje, zde má Nette hledat presentery v Composer classmap.

scanFilter
----------

Defaultní hodnota: `Presenter`

Určuje, jaký řetězec musí obsahovat třída a název souboru, který bude automaticky registrován.


Routování
=========

```neon
routing:
	debugger: true  # panel v Debugger baru
	routes:
			index.php: Dashboard:default
			'<presenter>/<action>[/<id>]': Dashboard:default
```

.[warning]
Konfigurace rout je zatím experimentální.


HTTP hlavičky
=============

```neon
http:
	frames: ... # ovlivňuje hlavičku X-Frame-Options
	headers:
		Content-Security-Policy: default-src 'self' https://maxcdn.bootstrapcdn.com
```

Framework z bezpečnostních důvodů odesílá hlavičku `X-Frame-Options: SAMEORIGIN`, která říká, že stránku lze zobrazit uvnitř jiné stránky (v elementu IFRAME) pouze pokud se nachází na stejné doméně. To může být v některých situacích nežádoucí (například pokud vyvíjíte aplikaci pro Facebook), chování lze proto vypnout nastavením položky `frames: yes`.
Můžete ovlivňovat i další odesílané hlavičky nastavením http.headers. V tomto příkladě nastavujeme hlavičku Content-Security-Policy která nám dovolí stahovat externí soubory (img, script apod.) pouze z naší domény, nebo z https://maxcdn.bootstrapcdn.com. Více o hlavičce [Content-Security-Policy | http://content-security-policy.com/].


Security
========

Uvedením pole `users` vytvoříme SimpleAuthenticator, uvedením polí `roles` nebo `resources` vytvoříme autorizátor Nette\Security\Permission.

```neon
security:
	debugger: true  # panel v Debugger baru

	users:
		frantisek: tajneheslo

	roles:
		guest:
		member:
		admin: [member]  # admin dědí od membera

	resources:
		file:
```


Maily
=====

Standardní mailer je SendmailMailer, uvedením `smtp` aktivujeme SmtpMailer.

```neon
mail:
	smtp: true # zapne SmtpMailer místo SendmailMailer
	# nepovinné nastavení
	host: ...
	port: ...
	username: ...
	password: ...
	secure: # povolené hodnoty jsou ssl, tls nebo null
	timeout: ...
```


Databáze
========

Můžeme vytvořit více připojení, které uvedeme pod klíčem `database`. Takto vytvoříme spojení nazvané `default`.

```neon
database:
	default:
		dsn: "sqlite2:%appDir%/models/demo.db"
		user: ...
		password: ...
		options: [PDO::MYSQL_ATTR_COMPRESS = true]
		debugger: false # panel v Debugger baru
		explain: false  # explain dotazů v Debugger baru
		reflection: discovered # nebo static nebo název třídy
```

Framework tak vytvoří nejen objekt `Nette\Database\Connection`, ale nastavují mu i pomocné objekty jako reflection & cache a ve vývojářském režimu přidá panel do Debugger baru.

V rámci konfiguračního souboru se můžeme ke službě dostat přes autowiring (`@Nette\Database\Connection`), přes název služby (`@nette.database.default`) nebo si vytvořit alias a ten používat:

```neon
services:
	database: @nette.database.default

	authorizator: Auth(@database)
```


Formuláře
=========

V konfiguračním souboru lze změnit výchozí chybové hlášky.

```neon
forms:
	messages:
		EQUAL: 'Please enter %s.'
		FILLED: 'Please complete mandatory field.'
		MIN_LENGTH: 'Please enter a value of at least %d characters.'
		EMAIL: '%label must be valid e-mail'
```


Šablony Latte
=============

Lze přepínat HTML a XHTML režim šablon:

```neon
latte:
	xhtml: no  # výchozí je false

```


DI
===

```neon
di:
	debugger: true  # aktivuje panel v Debugger baru
```


Tracy debugger
==============

Lze konfigurovat některé parametry Tracy a nastavovat panely do Debugger baru.

```neon
tracy:
	email: %webmasterEmail%
	strictMode: TRUE
	editor: ...
	browser: ...
	bar: # panely do Debugger baru
		- Nette\Bridges\DITracy\ContainerPanel # alias DI Container baru
		- IncludePanel
		- XDebugHelper('myIdeKey')
		- MyPanel(@MyService)
	blueScreen: # panely do Laděnky
		- DoctrinePanel::renderException
```


Low-level úpravy
================

Máte možnost si jednotlivé služby ještě "doladit" na nižší úrovni. Takto například nahradíme standardní třídy za své:

```neon
services:
	mail.mailer:
		factory: MySmtpMailer

	application.presenterFactory:
		factory: MyPresenterFactory
```



Vlastní služby
==============

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`. Například tato definice služby:

```neon
services:
	database: Nette\Database\Connection(%dsn%, %user%, %password%)

# nebo ve dvou řádcích:
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)

# nebo ve třech řádcích :-)
	database:
		class: Nette\Database\Connection
		arguments: [%dsn%, %user%, %password%]
```



Setup
=====

```neon
services:
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)
		setup:
			- setCacheStorage(@cacheStorage)

```

Autowiring umí odkazy na jiné služby doplnit automaticky, takže lze parametry úplně vynechat:

```neon
setup:
	- setCacheStorage
```

Pokud služba `cacheStorage` neexistuje, můžeme jako parametr uvést výsledek volání funkce:

```neon
setup:
	- setCacheStorage( Factory::createStorage() )

# nebo metody jiné služby:
	- setCacheStorage( @factory::createStorage() )
```

Případně nově vytvořenou třídu:

```neon
setup:
	- setCacheStorage( Nette\Caching\Storages\FileStorage(%tempDir%) )
```

Lze nastavovat i hodnoty proměnných:

substitutions
```neon
setup:
	- $substitutions( [db: test] )
```


Kompletní příklad:

```neon
parameters:
	database:
		driver: mysql
		host: localhost
		dbname: test
		user: jim
		password: beam
		substitutions:
			db: test

services:
	database:
		factory: Nette\Database\Connection(
			'%database.driver%:host=%database.host%;dbname=%database.dbname%',
			%database.user%, %database.password%, null,
			Nette\Database\Reflection\DiscoveredReflection()
		)
		setup:
			- setCacheStorage
			- $substitutions( %database.substitutions% )

```



Anonymní služby
===============

Pojmenování služeb je vhodné hlavně ve chvíli, kdy na ně chceme odkazovat z jiných částí konfiguračního souboru. Pokud na službu již není odkazováno, není ji potřeba pojmenovávat. Pro anonymní služby použijte následující syntax:

```neon
services:
	- Simple\Service

	-
		factory: Complex\Service
		setup:
			- setLang(%lang%)
```

Pokud však budete chtít později odkázat na anonymní službu, budete muset uvést úplný název třídy (rozhraní).

```neon
services:
	router: @App\RouterFactory::createRouter
```

Také je potřeba mít na paměti, že z povahy anonymních služeb nelze mít registrovaných více instancí stejného typu, protože by nebylo možné je rozlišit.


Dědičnost služeb
================

```neon
services:
	dev_database < database
		setup:
			- Diagnostics\ConnectionPanel::initialize

```


Auto-wiring
===========

Auto-wiring umí automaticky předávat do konstruktoru a dalších metod požadované služby. Řídí se podle type hintů a anotací `@return`. Služba odpovídající hledané třídě musí být v kontejneru právě jedna, jinak se vyhodí výjimka.

Pokud potřebujeme definovat více služeb stejného typu, můžeme je z auto-wiringu vyřadit:

```neon
services:
	cacheStorage:
		factory: Nette\Caching\Storages\FileStorage(%tempDir%)

	tempCacheStorage:
		factory: Nette\Caching\Storages\DevNullStorage
		autowired: no

```


Pokud upravujeme základní služby Nette Frameworku, nesmíme se zapomenout ujistit, že kontejner zná třídy naší implementace. Pokud tedy nastavujeme vlastní `factory` pro službu, tak to znamená mít správně absolutní název třídy v annotaci `@return`, nebo nastavovat vždy i třídu do `class`.


Více konfiguračních souborů
===========================

V případě, že chceme pro nastavení používat více propojených konfiguračních souborů, můžeme je uvést v sekci `includes`.

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Konfigurace se slučují tak, že nejvyšší prioritu má soubor obsahující sekci `includes` a nejnižší první vkládaný soubor. Slučování polí lze zabránit uvedením vykřičníku za název pole:

```neon
argument!: [1, 2, 3]
```
